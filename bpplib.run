# FROM "AMPL - A MODELING LANGUAGE FOR MATHEMATICAL PROGRAMMING", 2ND ED, by Fourer, Gay, and Kernighan.
# Section 14.4

# param dataFileName;  # Parameter to hold the data file name
# model bpplib.mod;
# data $dataFileName;  # Use the parameter in the data statement
# data N4C3W4_L.dat; # Hard-coded way of doing things. Not good, will change.

option solver cplex, solution_round 6;
option display_1col 0, display_transpose -10;

problem Cutting_Opt: Cut, Number, Fill;
option relax_integrality 1;

problem Pattern_Gen: Use, Reduced_Cost, Width_Limit;
option relax_integrality 0;

let nPAT := 0;
for {i in WIDTHS} {
	let nPAT := nPAT + 1; # lets us build a basis (same number of patterns as that of item types)
	let nbr[i,nPAT] := floor (roll_width/i); # starting basis
	#let nbr[i,nPAT] := 1; # starting basis
	let {i2 in WIDTHS: i2 <> i} nbr[i2,nPAT] := 0;
}

repeat {
	solve Cutting_Opt;
	let {i in WIDTHS} price[i] := Fill[i].dual;
	
	display nbr, Cut;
	
	solve Pattern_Gen;
	if Reduced_Cost < -0.00001 then {
		let nPAT := nPAT + 1;
		let {i in WIDTHS} nbr[i,nPAT] := Use[i];
	}
	else break;
}
display nbr, Cut;

option Cutting_Opt.relax_integrality 0;
solve Cutting_Opt;
display Cut;